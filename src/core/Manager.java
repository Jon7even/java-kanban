package core;import tasks.*;import java.util.ArrayList;import java.util.HashMap;import java.util.Objects;public class Manager {    private final HashMap<Integer, Task> tasks = new HashMap<>();    private final HashMap<Integer, Epic> epicTasks = new HashMap<>();    private final HashMap<Integer, Subtask> subTasks = new HashMap<>();    private int idGenerate = 0; // Генератор ID    public int addNewTask(Task task) {        int id = ++idGenerate;        task.setId(id);        tasks.put(id, task);        return id;    }    public int addNewEpic(Epic epic) {        int id = ++idGenerate;        epic.setId(id);        epicTasks.put(id, epic);        return id;    }    public Integer addNewSubtask(Subtask subtask) {        Epic epic = getSelectEpic(subtask.getRelationEpicId());        if (epic == null) {            System.out.println("Такого эпика нет, где-то подкралась ошибка.");            return -1;        } else {            int id = ++idGenerate;            subtask.setId(id);            subTasks.put(id, subtask);            epic.addSubtaskId(id);            return id;        }    }    public ArrayList<Task> getTasks() {        System.out.println("Текущий список всех простых задач:");        return new ArrayList<>(tasks.values());    }    public ArrayList<Epic> getEpics() {        System.out.println("Текущий список всех Эпиков:");        return new ArrayList<>(epicTasks.values());    }    public ArrayList<Subtask> getSubtask() {        System.out.println("Текущий список всех Подзадач:");        return new ArrayList<>(subTasks.values());    }    public void updateTask(Task task) {        tasks.put(task.getId(), task);    }    public void updateEpic(Epic epic) {        epicTasks.put(epic.getId(), epic);    }    public void deleteTasks() {        tasks.clear();    }    public void deleteEpics() {        epicTasks.clear();    }    public Task getSelectTask(int idSelect) {        if (tasks.get(idSelect) != null) {            return tasks.get(idSelect);        } else {            System.out.println("Задача с идентификатором '" + idSelect + '\'' + " не найдена!");        }        return null;    }    public Epic getSelectEpic(int idSelect) {        if (epicTasks.get(idSelect) != null) {            return epicTasks.get(idSelect);        } else {            System.out.println("Эпик с идентификатором '" + idSelect + '\'' + " не найден!");        }        return null;    }    public void removeSelectTask(int idSelect) {        if (tasks.get(idSelect) != null) {            tasks.remove(idSelect);            System.out.println("Задача с идентификатором '" + idSelect + '\'' + " удалена!");        } else {            System.out.println("Задача с идентификатором '" + idSelect + '\'' + " не найдена!");        }    }    public void removeSelectEpic(int idSelect) {        if (epicTasks.get(idSelect) != null) {            epicTasks.remove(idSelect);            System.out.println("Эпик с идентификатором '" + idSelect + '\'' + " удален!");        } else {            System.out.println("Эпик с идентификатором '" + idSelect + '\'' + " не найден!");        }    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Manager manager = (Manager) o;        return idGenerate == manager.idGenerate && tasks.equals(manager.tasks) && epicTasks.equals(manager.epicTasks) && subTasks.equals(manager.subTasks);    }    @Override    public int hashCode() {        return Objects.hash(tasks, epicTasks, subTasks, idGenerate);    }    @Override    public String toString() {        return "Manager{" +                "tasks=" + tasks +                ", epicTasks=" + epicTasks +                ", subTasks=" + subTasks +                ", idGenerate=" + idGenerate +                '}' + "\n";    }}